// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`will render links 1`] = `
<Fragment>
  <ForwardRef(IconButton)
    onClick={[Function]}
  >
    <Memo(ForwardRef(HelpIcon))
      color="info"
      style={
        Object {
          "fontSize": "2rem",
        }
      }
    />
  </ForwardRef(IconButton)>
  <ForwardRef(IconButton)
    onClick={[Function]}
  >
    <Memo(ForwardRef(GitHubIcon))
      color="success"
      style={
        Object {
          "fontSize": "2rem",
        }
      }
    />
  </ForwardRef(IconButton)>
</Fragment>
`;

exports[`will render the settings dialog 1`] = `
<ForwardRef(Dialog)
  maxWidth="xs"
  onClose={[MockFunction]}
  open={true}
  sx={
    Object {
      "& .MuiDialog-paper": Object {
        "maxHeight": 530,
        "width": "80%",
      },
    }
  }
>
  <ForwardRef(DialogContent)
    dividers={true}
  >
    <ForwardRef(ListItem)>
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(PatternIcon))
          color="info"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="pattern-list-label"
        primary="Pattern"
        secondary="Random"
      />
      <ForwardRef(IconButton)
        disabled={false}
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(RefreshIcon))
          color="success"
        />
      </ForwardRef(IconButton)>
      <ForwardRef(IconButton)
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(ManageAccountsIcon))
          color="error"
        />
      </ForwardRef(IconButton)>
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)>
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(Grid4x4Icon))
          color="info"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="switch-list-label-grid"
        primary="Grid"
      />
      <ForwardRef(Switch)
        checked={true}
        edge="end"
        inputProps={
          Object {
            "aria-labelledby": "switch-list-label-grid",
          }
        }
        onChange={[MockFunction]}
      />
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)>
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(FormatColorFillIcon))
          color="info"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="color-list-label"
        primary="Colors"
      />
      <ForwardRef(IconButton)
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(ColorLensIcon))
          color="success"
        />
      </ForwardRef(IconButton)>
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)
      key="Info 1"
    >
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(InfoIcon))
          color="warning"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="Info 1-label"
        primary="Info 1"
      />
      <ForwardRef(Typography)
        variant="subtitle1"
      >
        Info 1 value
      </ForwardRef(Typography)>
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)
      key="Info 2"
    >
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(InfoIcon))
          color="warning"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="Info 2-label"
        primary="Info 2"
      />
      <ForwardRef(Typography)
        variant="subtitle1"
      >
        Info 2 value
      </ForwardRef(Typography)>
    </ForwardRef(ListItem)>
  </ForwardRef(DialogContent)>
  <ForwardRef(DialogActions)
    sx={
      Object {
        "display": "flex",
        "flexDirection": "row",
        "justifyContent": "space-around",
      }
    }
  >
    <Links />
    <ForwardRef(IconButton)
      aria-label="reset"
      onClick={[MockFunction]}
    >
      <Memo(ForwardRef(CancelOutlinedIcon))
        style={
          Object {
            "fontSize": "2rem",
          }
        }
      />
    </ForwardRef(IconButton)>
  </ForwardRef(DialogActions)>
</ForwardRef(Dialog)>
`;

exports[`will render the settings dialog for no pattern or grid 1`] = `
<ForwardRef(Dialog)
  maxWidth="xs"
  onClose={[MockFunction]}
  open={true}
  sx={
    Object {
      "& .MuiDialog-paper": Object {
        "maxHeight": 530,
        "width": "80%",
      },
    }
  }
>
  <ForwardRef(DialogContent)
    dividers={true}
  >
    <ForwardRef(ListItem)>
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(PatternIcon))
          color=""
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="pattern-list-label"
        primary="Pattern"
        secondary="None"
      />
      <ForwardRef(IconButton)
        disabled={true}
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(RefreshIcon))
          color=""
        />
      </ForwardRef(IconButton)>
      <ForwardRef(IconButton)
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(ManageAccountsIcon))
          color="error"
        />
      </ForwardRef(IconButton)>
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)>
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(Grid4x4Icon))
          color=""
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="switch-list-label-grid"
        primary="Grid"
      />
      <ForwardRef(Switch)
        checked={false}
        edge="end"
        inputProps={
          Object {
            "aria-labelledby": "switch-list-label-grid",
          }
        }
        onChange={[MockFunction]}
      />
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)>
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(FormatColorFillIcon))
          color="info"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="color-list-label"
        primary="Colors"
      />
      <ForwardRef(IconButton)
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(ColorLensIcon))
          color="success"
        />
      </ForwardRef(IconButton)>
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)
      key="Info 1"
    >
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(InfoIcon))
          color="warning"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="Info 1-label"
        primary="Info 1"
      />
      <ForwardRef(Typography)
        variant="subtitle1"
      >
        Info 1 value
      </ForwardRef(Typography)>
    </ForwardRef(ListItem)>
    <ForwardRef(ListItem)
      key="Info 2"
    >
      <ForwardRef(ListItemIcon)>
        <Memo(ForwardRef(InfoIcon))
          color="warning"
        />
      </ForwardRef(ListItemIcon)>
      <ForwardRef(ListItemText)
        id="Info 2-label"
        primary="Info 2"
      />
      <ForwardRef(Typography)
        variant="subtitle1"
      >
        Info 2 value
      </ForwardRef(Typography)>
    </ForwardRef(ListItem)>
  </ForwardRef(DialogContent)>
  <ForwardRef(DialogActions)
    sx={
      Object {
        "display": "flex",
        "flexDirection": "row",
        "justifyContent": "space-around",
      }
    }
  >
    <Links />
    <ForwardRef(IconButton)
      aria-label="reset"
      onClick={[MockFunction]}
    >
      <Memo(ForwardRef(CancelOutlinedIcon))
        style={
          Object {
            "fontSize": "2rem",
          }
        }
      />
    </ForwardRef(IconButton)>
  </ForwardRef(DialogActions)>
</ForwardRef(Dialog)>
`;
