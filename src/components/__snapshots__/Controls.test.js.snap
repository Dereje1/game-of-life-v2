// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`will render links 1`] = `
<ForwardRef(Stack)
  direction="column"
  spacing={0.5}
  style={
    Object {
      "margin": 5,
    }
  }
>
  <ForwardRef(Avatar)
    onClick={[Function]}
    sx={
      Object {
        "bgcolor": "#737272",
        "cursor": "pointer",
        "height": 26,
        "width": 26,
      }
    }
  >
    <Memo(ForwardRef(HelpIcon)) />
  </ForwardRef(Avatar)>
  <ForwardRef(Avatar)
    onClick={[Function]}
    sx={
      Object {
        "bgcolor": "#bd2c00",
        "cursor": "pointer",
        "height": 26,
        "width": 26,
      }
    }
  >
    <Memo(ForwardRef(GitHubIcon)) />
  </ForwardRef(Avatar)>
</ForwardRef(Stack)>
`;

exports[`will render pause when refreshing 1`] = `
<Memo(ForwardRef(PauseIcon))
  style={
    Object {
      "color": "#d32f2f",
      "fontSize": "2.5rem",
    }
  }
/>
`;

exports[`will render play when not refreshing 1`] = `
<Memo(ForwardRef(PlayCircleFilledWhiteIcon))
  style={
    Object {
      "color": "#0288d1",
      "fontSize": "2.5rem",
    }
  }
/>
`;

exports[`will render the bottom control 1`] = `
<div
  style={
    Object {
      "alignItems": "center",
      "display": "flex",
      "height": 80,
      "justifyContent": "space-around",
      "marginTop": 5,
      "width": "100%",
    }
  }
>
  <div
    style={
      Object {
        "width": "30%",
      }
    }
  >
    <ForwardRef(Slider)
      aria-label="Cellsize"
      defaultValue={15}
      marks={
        Array [
          Object {
            "label": "5",
            "value": 5,
          },
          Object {
            "label": "10",
            "value": 10,
          },
          Object {
            "label": "15",
            "value": 15,
          },
          Object {
            "label": "20",
            "value": 20,
          },
          Object {
            "label": "25px",
            "value": 25,
          },
        ]
      }
      max={25}
      min={5}
      onChange={[MockFunction]}
      step={5}
      value={20}
      valueLabelDisplay="off"
    />
  </div>
  <div
    style={
      Object {
        "width": "30%",
      }
    }
  >
    <ForwardRef(Slider)
      aria-label="Refreshrate"
      color="secondary"
      defaultValue={-100}
      marks={
        Array [
          Object {
            "label": "400ms",
            "value": -400,
          },
          Object {
            "label": "300",
            "value": -300,
          },
          Object {
            "label": "200",
            "value": -200,
          },
          Object {
            "label": "100",
            "value": -100,
          },
          Object {
            "label": "max",
            "value": -1,
          },
        ]
      }
      max={-1}
      min={-400}
      onChange={[MockFunction]}
      step={null}
      value={140}
      valueLabelDisplay="off"
    />
  </div>
  <Links />
</div>
`;

exports[`will render the top control 1`] = `
<div
  style={
    Object {
      "alignItems": "center",
      "background": "#e5e5e359",
      "display": "flex",
      "flexDirection": "row",
      "height": 80,
      "justifyContent": "space-evenly",
      "width": "100%",
    }
  }
>
  <div>
    <ForwardRef(IconButton)
      aria-label="play_pause"
      onClick={[MockFunction]}
    >
      <Action
        isRefreshing={true}
      />
    </ForwardRef(IconButton)>
    <ForwardRef(IconButton)
      aria-label="reset"
      onClick={[MockFunction]}
    >
      <Memo(ForwardRef(PatternIcon))
        style={
          Object {
            "fontSize": "2.5rem",
          }
        }
      />
    </ForwardRef(IconButton)>
    <ForwardRef(IconButton)
      aria-label="clear"
      onClick={[MockFunction]}
    >
      <Memo(ForwardRef(HighlightOffOutlinedIcon))
        style={
          Object {
            "fontSize": "2.5rem",
          }
        }
      />
    </ForwardRef(IconButton)>
    <ForwardRef(Checkbox)
      checked={true}
      checkedIcon={<Memo />}
      icon={<Memo />}
      onChange={[MockFunction]}
    />
  </div>
  <ForwardRef(Chip)
    color="error"
    label={6}
    style={
      Object {
        "justifyContent": "space-between",
        "width": 100,
      }
    }
    variant="outlined"
  />
</div>
`;
