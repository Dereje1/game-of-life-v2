// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`will render pause when refreshing 1`] = `
<Memo(ForwardRef(PauseIcon))
  style={
    Object {
      "color": "#d32f2f",
      "fontSize": "2.5rem",
    }
  }
/>
`;

exports[`will render play when not refreshing 1`] = `
<Memo(ForwardRef(PlayCircleFilledWhiteIcon))
  style={
    Object {
      "color": "#0288d1",
      "fontSize": "2.5rem",
    }
  }
/>
`;

exports[`will render the bottom control 1`] = `
<div
  style={
    Object {
      "alignItems": "center",
      "display": "flex",
      "height": 80,
      "justifyContent": "space-around",
      "marginTop": 5,
      "width": "100%",
    }
  }
>
  <div
    style={
      Object {
        "width": "30%",
      }
    }
  >
    <ForwardRef(Typography)
      gutterBottom={true}
      id="linear-slider"
      sx={
        Object {
          "fontSize": "1.3vmax",
          "fontWeight": "bold",
          "marginBottom": 0,
        }
      }
    >
      Element size: 20px
    </ForwardRef(Typography)>
    <ForwardRef(Slider)
      aria-label="Cellsize"
      defaultValue={15}
      marks={
        Array [
          Object {
            "value": 5,
          },
          Object {
            "value": 10,
          },
          Object {
            "value": 15,
          },
          Object {
            "value": 20,
          },
          Object {
            "value": 25,
          },
        ]
      }
      max={25}
      min={5}
      onChange={[MockFunction]}
      step={5}
      value={20}
      valueLabelDisplay="off"
    />
  </div>
  <div
    style={
      Object {
        "width": "30%",
      }
    }
  >
    <ForwardRef(Typography)
      gutterBottom={true}
      id="non-linear-slider"
      sx={
        Object {
          "fontSize": "1.3vmax",
          "fontWeight": "bold",
          "marginBottom": 0,
        }
      }
    >
      8 generations / sec
    </ForwardRef(Typography)>
    <ForwardRef(Slider)
      aria-label="Refreshrate"
      color="secondary"
      defaultValue={3}
      marks={
        Array [
          Object {
            "value": 1,
          },
          Object {
            "value": 2,
          },
          Object {
            "value": 3,
          },
          Object {
            "value": 6,
          },
        ]
      }
      max={6}
      min={1}
      onChange={[MockFunction]}
      scale={[Function]}
      step={null}
      value={3}
      valueLabelDisplay="off"
    />
  </div>
</div>
`;

exports[`will render the top control 1`] = `
<div
  style={
    Object {
      "background": "#e5e5e359",
      "display": "flex",
      "flexDirection": "column",
      "height": 80,
      "justifyContent": "flex-end",
      "width": "100%",
    }
  }
>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "row",
        "justifyContent": "space-evenly",
        "width": "100%",
      }
    }
  >
    <div>
      <ForwardRef(IconButton)
        aria-label="play_pause"
        disabled={false}
        onClick={[MockFunction]}
      >
        <Action
          disabled={false}
          isRefreshing={true}
        />
      </ForwardRef(IconButton)>
      <ForwardRef(IconButton)
        aria-label="next_step"
        disabled={true}
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(SkipNextIcon))
          style={
            Object {
              "fontSize": "2.5rem",
            }
          }
        />
      </ForwardRef(IconButton)>
      <ForwardRef(IconButton)
        aria-label="clear"
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(HighlightOffOutlinedIcon))
          style={
            Object {
              "fontSize": "2.5rem",
            }
          }
        />
      </ForwardRef(IconButton)>
      <ForwardRef(IconButton)
        aria-label="settings"
        onClick={[MockFunction]}
      >
        <Memo(ForwardRef(SettingsIcon))
          color="error"
          style={
            Object {
              "fontSize": "2rem",
            }
          }
        />
      </ForwardRef(IconButton)>
    </div>
    <div>
      <ForwardRef(Chip)
        color="error"
        label={6}
        style={
          Object {
            "justifyContent": "space-between",
            "marginBottom": 3,
            "width": 100,
          }
        }
        variant="outlined"
      />
    </div>
  </div>
  <ForwardRef(Tooltip)
    placement="top-start"
    title="7.0 generations/sec"
  >
    <ForwardRef(LinearProgress)
      sx={
        Object {
          "& .MuiLinearProgress-bar": Object {
            "bgcolor": "#d32f2f",
          },
          "background": "#e5e5e359",
        }
      }
      value={87}
      variant="determinate"
    />
  </ForwardRef(Tooltip)>
</div>
`;
